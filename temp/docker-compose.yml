version: '3.8'

services:
  # Aplicaci√≥n Principal MoonYetis Slots
  moonyetis-app:
    build: .
    container_name: moonyetis-slots
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    depends_on:
      - redis
      - postgres
    volumes:
      - ./logs:/app/logs
      - /etc/ssl:/etc/ssl:ro
    networks:
      - moonyetis-network

  # Redis para sesiones y cache
  redis:
    image: redis:7-alpine
    container_name: moonyetis-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - moonyetis-network

  # PostgreSQL para transacciones
  postgres:
    image: postgres:15-alpine
    container_name: moonyetis-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - moonyetis-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: moonyetis-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - moonyetis-app
    networks:
      - moonyetis-network

  # Monitoreo con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: moonyetis-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - moonyetis-network

volumes:
  redis-data:
  postgres-data:

networks:
  moonyetis-network:
    driver: bridge

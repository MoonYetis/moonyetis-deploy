version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: moonyetis-postgres-secure
    environment:
      # Use environment variables from .env file
      POSTGRES_DB: ${DB_NAME:-moonyetis_prod}
      POSTGRES_USER: ${DB_USER:-moonyetis}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      # Enable SSL
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./ssl/postgres:/var/lib/postgresql/ssl:ro
    secrets:
      - db_password
    restart: unless-stopped
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c ssl_ca_file=/var/lib/postgresql/ssl/ca.crt
      -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-moonyetis} -d ${DB_NAME:-moonyetis_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: moonyetis-redis-secure
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./ssl/redis:/etc/ssl/redis:ro
    restart: unless-stopped
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass "${REDIS_PASSWORD}"
      --tls-port 6380
      --port 0
      --tls-cert-file /etc/ssl/redis/redis.crt
      --tls-key-file /etc/ssl/redis/redis.key
      --tls-ca-cert-file /etc/ssl/redis/ca.crt
    secrets:
      - redis_password

  app:
    build: .
    container_name: moonyetis-app-secure
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      REDIS_HOST: redis
      # All sensitive credentials loaded from secure storage
      MASTER_KEY_FILE: /app/.secure/master.key
      CREDENTIALS_FILE: /app/.secure/credentials.enc
    ports:
      - "${HTTP_PORT:-3000}:3000"
      - "${HTTPS_PORT:-3443}:3443"
    volumes:
      - ./.secure:/app/.secure:ro
      - ./ssl/app:/app/ssl:ro
      - ./logs:/app/logs
    secrets:
      - db_password
      - redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: moonyetis-nginx-secure
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/nginx:/etc/ssl/nginx:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped

secrets:
  db_password:
    external: true
    name: moonyetis_db_password
  redis_password:
    external: true
    name: moonyetis_redis_password

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/moonyetis/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/moonyetis/redis

networks:
  default:
    name: moonyetis-secure
    driver: bridge
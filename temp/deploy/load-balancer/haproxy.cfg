# HAProxy Load Balancer Configuration for MoonYetis
# Production-ready configuration with SSL termination, health checks, and failover

global
    # Process settings
    daemon
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid
    
    # Logging
    log 127.0.0.1:514 local0 info
    
    # SSL/TLS configuration
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    
    # DH parameters for perfect forward secrecy
    ssl-dh-param-file /etc/ssl/certs/dhparam.pem
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.ssl.capture-buffer-size 1
    tune.ssl.maxrecord 1460
    
    # Connection limits
    maxconn 4096
    
    # Stats socket
    stats socket /var/run/haproxy.sock mode 666 level admin
    stats timeout 2m

defaults
    # Mode
    mode http
    
    # Logging
    log global
    option httplog
    option dontlognull
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout tunnel 1h
    timeout http-keep-alive 4s
    timeout http-request 15s
    timeout queue 30s
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json application/xml
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
    
    # Health checks
    option httpchk GET /api/monitoring/health
    http-check expect status 200

# Frontend - HTTP to HTTPS redirect
frontend moonyetis_http
    bind *:80
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend - HTTPS
frontend moonyetis_https
    bind *:443 ssl crt /etc/ssl/certs/moonyetis.com.pem
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: https:;"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # DDoS protection
    http-request deny if { src_conn_rate(10s) gt 10 }
    http-request deny if { src_conn_cur gt 5 }
    
    # Block malicious requests
    http-request deny if { path_reg -i \.(php|asp|jsp|cgi)$ }
    http-request deny if { path_reg -i (admin|wp-admin|wp-content) }
    http-request deny if { hdr_sub(user-agent) -i (curl|wget|scanner|bot) }
    
    # Capture client IP
    option forwardfor
    http-request add-header X-Forwarded-Proto https
    http-request add-header X-Real-IP %[src]
    
    # Routing based on path
    acl is_api path_beg /api/
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_static path_reg \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$
    
    # Use different backends based on request type
    use_backend moonyetis_api if is_api
    use_backend moonyetis_websocket if is_websocket
    use_backend moonyetis_static if is_static
    default_backend moonyetis_app

# Backend - Main Application
backend moonyetis_app
    balance roundrobin
    option httpchk GET /api/monitoring/health
    
    # Session persistence
    stick-table type string len 32 size 30k expire 30m
    stick on cookie(sessionid)
    
    # Servers
    server app1 127.0.0.1:3000 check inter 5s rise 2 fall 3 maxconn 100
    server app2 127.0.0.1:3001 check inter 5s rise 2 fall 3 maxconn 100 backup
    
    # Connection limits
    default-server maxconn 50 maxqueue 10

# Backend - API Endpoints
backend moonyetis_api
    balance roundrobin
    option httpchk GET /api/monitoring/health
    
    # API-specific timeouts
    timeout server 30s
    timeout connect 5s
    
    # Retry configuration
    retries 3
    option redispatch
    
    # Servers
    server api1 127.0.0.1:3000 check inter 5s rise 2 fall 3 maxconn 200
    server api2 127.0.0.1:3001 check inter 5s rise 2 fall 3 maxconn 200 backup
    
    # Connection limits
    default-server maxconn 100 maxqueue 20

# Backend - WebSocket Connections
backend moonyetis_websocket
    balance source
    option httpchk GET /api/monitoring/health
    
    # WebSocket-specific settings
    timeout tunnel 1h
    timeout server 1h
    
    # Sticky sessions for WebSocket
    stick-table type ip size 10k expire 1h
    stick on src
    
    # Servers
    server ws1 127.0.0.1:3000 check inter 10s rise 2 fall 3 maxconn 500
    server ws2 127.0.0.1:3001 check inter 10s rise 2 fall 3 maxconn 500 backup

# Backend - Static Assets (cached)
backend moonyetis_static
    balance roundrobin
    option httpchk GET /favicon.ico
    
    # Static file caching headers
    http-response set-header Cache-Control "public, max-age=31536000"
    http-response set-header Expires "%[date(31536000),http_date]"
    
    # Servers
    server static1 127.0.0.1:3000 check inter 30s rise 2 fall 3 maxconn 50
    server static2 127.0.0.1:3001 check inter 30s rise 2 fall 3 maxconn 50 backup

# Stats interface
listen stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    
    # Authentication
    stats auth admin:SecureStatsPassword123!
    
    # Security
    stats hide-version
    
    # Custom styling
    stats realm HAProxy\ Statistics
    stats show-legends
    stats show-node

# Health check endpoint
listen health_check
    bind *:8081
    mode http
    
    # Simple health check
    monitor-uri /health
    
    # Custom health check
    option httpchk GET /api/monitoring/health
    http-check expect status 200

# Maintenance page
listen maintenance
    bind *:8082
    mode http
    
    # Serve maintenance page
    errorfile 503 /etc/haproxy/maintenance.html
    
    # Return 503 for all requests
    http-request deny status 503
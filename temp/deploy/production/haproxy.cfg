global
    daemon
    user haproxy
    group haproxy
    
    # SSL Configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!NULL:!aNULL:!SHA1:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!NULL:!aNULL:!SHA1:!DSS
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Logging
    log stdout local0
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    option redispatch
    
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:secure_password_here

# HTTP Frontend (redirect to HTTPS)
frontend http_frontend
    bind *:80
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # ACME challenge for Let's Encrypt
    acl is_acme_challenge path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if is_acme_challenge
    
    # Redirect to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# HTTPS Frontend
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/moonyetis.pem
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self' https:"
    
    # DDoS protection
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 50 }
    http-request deny if { sc_http_err_rate(0) gt 10 }
    
    # Path-based routing
    acl is_api path_beg /api/
    acl is_monitoring path_beg /api/monitoring/
    acl is_static path_beg /frontend/ /assets/ /images/
    
    # Use appropriate backend
    use_backend monitoring_backend if is_monitoring
    use_backend api_backend if is_api
    use_backend static_backend if is_static
    default_backend app_backend

# Application Backend
backend app_backend
    balance roundrobin
    option httpchk GET /api/monitoring/health
    http-check expect status 200
    
    # Server configuration
    server app1 moonyetis-app:3000 check inter 10s rise 2 fall 3 maxconn 100
    # Add more servers here for horizontal scaling
    # server app2 moonyetis-app-2:3000 check inter 10s rise 2 fall 3 maxconn 100

# API Backend (with circuit breaker)
backend api_backend
    balance roundrobin
    option httpchk GET /api/monitoring/health
    
    # Circuit breaker configuration
    http-request deny if { nbsrv(api_backend) lt 1 }
    
    server app1 moonyetis-app:3000 check inter 5s rise 2 fall 2 maxconn 50

# Monitoring Backend (rate limited)
backend monitoring_backend
    balance roundrobin
    
    # Rate limiting for monitoring endpoints
    stick-table type ip size 10k expire 60s store http_req_rate(60s)
    http-request track-sc1 src
    http-request deny if { sc_http_req_rate(1) gt 30 }
    
    server app1 moonyetis-app:3000 check inter 30s

# Static Content Backend
backend static_backend
    balance roundrobin
    
    # Caching headers for static content
    http-response set-header Cache-Control "public, max-age=86400"
    
    server app1 moonyetis-app:3000 check inter 30s

# Let's Encrypt Backend
backend letsencrypt
    server letsencrypt 127.0.0.1:8080
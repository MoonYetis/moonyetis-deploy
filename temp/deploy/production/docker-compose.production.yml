version: '3.8'

services:
  # Main Application
  moonyetis-app:
    build:
      context: ../..
      dockerfile: deploy/production/Dockerfile
    container_name: moonyetis-production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HTTPS_PORT: 3443
      DB_HOST: postgres-primary
      REDIS_HOST: redis
      FRACTAL_NETWORK: mainnet
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ssl_certs:/app/.ssl:ro
      - secure_files:/app/.secure:ro
    ports:
      - "3000:3000"
      - "3443:3443"
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - moonyetis-production
    secrets:
      - ssl_cert
      - ssl_key
      - master_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer (HAProxy)
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: moonyetis-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404" # HAProxy stats
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ssl_certs:/etc/ssl/certs:ro
      - ./letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - moonyetis-app
    networks:
      - moonyetis-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL Primary
  postgres-primary:
    image: postgres:15
    container_name: moonyetis-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: moonyetis_slots
      POSTGRES_USER: moonyetis_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD_FILE: /run/secrets/replication_password
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgresql.production.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.production.conf:/etc/postgresql/pg_hba.conf
      - ../../init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
      - ../../migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - moonyetis-production
    secrets:
      - db_password
      - replication_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moonyetis_user -d moonyetis_slots"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Replica (Read-only)
  postgres-replica:
    image: postgres:15
    container_name: moonyetis-postgres-replica
    restart: unless-stopped
    environment:
      POSTGRES_DB: moonyetis_slots
      POSTGRES_USER: moonyetis_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      PGUSER: postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgresql.replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5433:5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: |
      bash -c "
        if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
          echo 'Initializing replica from primary...'
          PGPASSWORD=$$(cat /run/secrets/replication_password) pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U replicator -W -v -P -R
          chown -R postgres:postgres /var/lib/postgresql/data
        fi
        postgres -c config_file=/etc/postgresql/postgresql.conf
      "
    networks:
      - moonyetis-production
    secrets:
      - db_password
      - replication_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moonyetis_user -d moonyetis_slots"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis (Cache & Sessions)
  redis:
    image: redis:7-alpine
    container_name: moonyetis-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - moonyetis-production
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PgBouncer (Connection Pooling)
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: moonyetis-pgbouncer
    restart: unless-stopped
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: moonyetis_user
      DATABASES_PASSWORD_FILE: /run/secrets/db_password
      DATABASES_DBNAME: moonyetis_slots
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 200
      DEFAULT_POOL_SIZE: 50
      RESERVE_POOL_SIZE: 10
    ports:
      - "6432:5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - moonyetis-production
    secrets:
      - db_password
    healthcheck:
      test: ["CMD", "psql", "-h", "localhost", "-U", "moonyetis_user", "-d", "moonyetis_slots", "-c", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: moonyetis-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - moonyetis-production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: moonyetis-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - moonyetis-production
    secrets:
      - grafana_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service
  backup-service:
    build:
      context: ../..
      dockerfile: deploy/production/Dockerfile.backup
    container_name: moonyetis-backup
    restart: unless-stopped
    environment:
      BACKUP_SCHEDULE: "0 2 * * *" # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - app_data:/app/data:ro
      - postgres_primary_data:/postgres/data:ro
      - backup_storage:/backups
    depends_on:
      - postgres-primary
      - redis
    networks:
      - moonyetis-production
    secrets:
      - db_password

  # Log Aggregator (Fluent Bit)
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: moonyetis-logs
    restart: unless-stopped
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - app_logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "24224:24224"
    networks:
      - moonyetis-production

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  ssl_certs:
    driver: local
  secure_files:
    driver: local
  backup_storage:
    driver: local

networks:
  moonyetis-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  ssl_cert:
    file: ./secrets/ssl_cert.pem
  ssl_key:
    file: ./secrets/ssl_key.pem
  master_key:
    file: ./secrets/master.key
  db_password:
    file: ./secrets/db_password
  replication_password:
    file: ./secrets/replication_password
  grafana_password:
    file: ./secrets/grafana_password